est.err <- sqrt( cumsum( (h_x.result_vec-est.int)^2 )) / (1:15000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = c(0.92,1))
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = c(0.7,1.1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
theta <- 0.02
h_x.result_vec <- numeric(15000)
for (i in 1:15000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==0))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1
}
}
mean(h_x.result_vec)
var(h_x.result_vec)
est.int <- cumsum(h_x.result_vec)/(1:15000)
est.err <- sqrt( cumsum( (h_x.result_vec-est.int)^2 )) / (1:15000)
cat(sprintf("Expected value extimator (GN) = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
theta <- 0.02
h_x.result_vec <- numeric(15000)
for (i in 1:15000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==0))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1
}
}
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", raund(var(h_x.result_vec),4)),
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec),4)),
sep = "\n")
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = c(0.92,1))
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = c(0.7,1.1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "green", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "silver", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
theta <- 0.005
h_x.result_vec <- numeric(50000)
for (i in 1:50000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==0))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1
}
}
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec),4)),
sep = "\n")
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[50000]*c(-1,1))
install.packages("igraph")
library(igraph)
graph.Q1 <- make_graph(c(
"A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
plot(graph.Q1)
theta <- 0.02
h_x.result_vec <- numeric(15000)
for (i in 1:15000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1
}
}
graph.Q1 <- make_graph(c(
"A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
library(igraph)
graph.Q1 <- make_graph(c(
"A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
plot(graph.Q1)
theta <- 0.02
h_x.result_vec <- numeric(15000)
for (i in 1:15000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1
}
}
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec),4)),
sep = "\n")
cat(sprintf("Expected value extimator = %s", round(mean(h_x.result_vec),4)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec),4)),
sep = "\n")
est.int <- cumsum(h_x.result_vec)/(1:15000)
est.err <- sqrt( cumsum( (h_x.result_vec-est.int)^2 )) / (1:15000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
theta <- 0.005
h_x.result_vec <- numeric(50000)
for (i in 1:50000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1
}
}
cat(sprintf("Expected value extimator = %s", round(mean(h_x.result_vec),4)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec),4)),
sep = "\n")
est.int <- cumsum(h_x.result_vec)/(1:50000)
est.err <- sqrt( cumsum( (h_x.result_vec-est.int)^2 )) / (1:50000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[50000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
h_x.result_vec
mean(h_x.result_vec)
theta <- 0.005
h_x.result_vec <- numeric(50000)
for (i in 1:50000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1
}
}
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
est.int <- cumsum(h_x.result_vec)/(1:50000)
est.err <- sqrt( cumsum( (h_x.result_vec-est.int)^2 )) / (1:50000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[50000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sprintf("No. of failures = %s", sum(h_x.result_vec)),
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sprintf("No. of failures = %s", sum(h_x.result_vec)),
sep = "\n")
sum(h_x.result_vec)
h_x.result_vec
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sprintf("Out of 50,000 test, we got %s", sum(h_x.result_vec)),"failures",
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sprintf(c("Out of 50,000 test, we got %s", sum(h_x.result_vec)),"failures"),
sep = "\n")
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sprintf("Out of 50,000 test, the no. of failures = %s", sum(h_x.result_vec)),
sep = "\n")
theta.f <- 0.02
theta.g <- 0.05
h_x.result_vec <- numeric(15000)
for (i in 1:15000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta.g))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1*prod( dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.f)) / dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.g)))
}
}
cat(sprintf("Expected value extimator = %s", round(mean(h_x.result_vec),4)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec),4)),
sep = "\n")
est.int <- cumsum(h_x.result_vec)/(1:15000)
est.err <- sqrt( cumsum( (h_x.result_vec-est.int)^2 )) / (1:15000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
theta.f <- 0.005
theta.g <- 0.02
h_x.result_vec <- numeric(50000)
for (i in 1:50000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta.g))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec[i] <- 1*prod( dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.f)) / dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.g)))
}
}
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec)),
sep = "\n")
est.int <- cumsum(h_x.result_vec)/(1:50000)
est.err <- sqrt( cumsum( (h_x.result_vec-est.int)^2 )) / (1:50000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec)+100*est.err[50000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
summary_table <- data.frame(row.names = c("Expected value extimator","Varianc value extimator"),)
summary_table <- data.frame(c(0,0,0,0,0,0,0),row.names = c("Expected value extimator","Varianc value extimator"),)
?data.frame
summary_table <- data.frame(x = c(0,0,0,0,0,0,0),row.names = c("Expected value extimator","Varianc value extimator"),)
#install.packages("stringi")
#install.packages("LearnGeom")
#install.packages("kntir")
library(knitr)
library(stringi)
library(LearnGeom)
result_vec_Q1 <- numeric(10000)
for (i in 1:10000) {
counter <- 3
monkey_word <- stri_rand_strings(n = 1, length = 3, pattern = "[a-z]")
while (monkey_word != 'dog')
{
counter <- counter + 1
stri_sub(monkey_word, from=4L, to=-1L) <- stri_rand_strings(n = 1, length = 1, pattern = "[a-z]")
monkey_word <- stri_sub(monkey_word, from=2L, to=4L)
}
result_vec_Q1[i] <- counter
}
mat_a8_sv3 <- matrix(1:20, nrow = 4, ncol = 5,dimnames = list(gamble_val,p))
summary_table <- matrix(data =
c(mean(h_x.result_vec.a),var(h_x.result_vec.a),
mean(h_x.result_vec.b),var(h_x.result_vec.b),
mean(h_x.result_vec.c),var(h_x.result_vec.c),
mean(h_x.result_vec.d),var(h_x.result_vec.d)),
nrow = 2,ncol = 4)
#install.packages("igraph")
library(igraph)
graph.Q1 <- make_graph(c(
"A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
plot(graph.Q1)
theta <- 0.02
h_x.result_vec.a <- numeric(15000)
for (i in 1:15000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec.a[i] <- 1
}
}
cat(sprintf("Expected value extimator = %s", round(mean(h_x.result_vec.a),4)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec.a),4)),
sep = "\n")
est.int <- cumsum(h_x.result_vec.a)/(1:15000)
est.err <- sqrt( cumsum( (h_x.result_vec.a-est.int)^2 )) / (1:15000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec.a)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
theta <- 0.005
h_x.result_vec.b <- numeric(50000)
for (i in 1:50000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec.b[i] <- 1
}
}
cat(sprintf("Expected value extimator = %s", mean(h_x.result_vec.b)),
sprintf("Varinace value extimator = %s", var(h_x.result_vec.b)),
sprintf("Out of 50,000 test, the no. of failures = %s", sum(h_x.result_vec.b)),
sep = "\n")
est.int <- cumsum(h_x.result_vec.b)/(1:50000)
est.err <- sqrt( cumsum( (h_x.result_vec.b-est.int)^2 )) / (1:50000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec.b)+100*est.err[50000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
theta.f <- 0.02
theta.g <- 0.05
h_x.result_vec.c <- numeric(15000)
for (i in 1:15000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta.g))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec.c[i] <- 1*prod( dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.f)) / dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.g)))
}
}
cat(sprintf("Expected value extimator = %s", round(mean(h_x.result_vec.c),4)),
sprintf("Varinace value extimator = %s", round(var(h_x.result_vec.c),4)),
sep = "\n")
est.int <- cumsum(h_x.result_vec.c)/(1:15000)
est.err <- sqrt( cumsum( (h_x.result_vec.c-est.int)^2 )) / (1:15000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec,c)+100*est.err[15000]*c(-1,1))
est.int <- cumsum(h_x.result_vec.c)/(1:15000)
est.err <- sqrt( cumsum( (h_x.result_vec.c-est.int)^2 )) / (1:15000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec.c)+100*est.err[15000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
theta.f <- 0.005
theta.g <- 0.02
h_x.result_vec.d <- numeric(50000)
for (i in 1:50000) {
graph.zero_day.i <- make_graph(c("A", "B", "A", "C","A", "D","A", "E",
"B","C","B","F",
"C","F","C","G","C","D","C","H",
"D","E","D","H","D","I","D","G",
"E","I",
"F","G","F","J",
"G","H","G","J",
"H","I","H","J",
"I","J"), directed = TRUE)
after_10_days.i <- rbinom(n = 22,size = 1,prob = 1-exp(-10*theta.g))
graph_after_10_days.i <- delete.edges(graph = graph.zero_day.i,edges = which(after_10_days.i==1))
paths_A_J_after_10_days.i <- all_simple_paths(graph = graph_after_10_days.i,from = "A","J")
if(identical(paths_A_J_after_10_days.i,list())){
h_x.result_vec.d[i] <- 1*prod( dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.f)) / dbinom(x = after_10_days.i,size = 1,prob = 1-exp(-10*theta.g)))
}
}
cat(sprintf("Expected value estimator = %s", mean(h_x.result_vec.d)),
sprintf("Varinace value estimator = %s", var(h_x.result_vec.d)),
sep = "\n")
est.int <- cumsum(h_x.result_vec.d)/(1:50000)
est.err <- sqrt( cumsum( (h_x.result_vec.d-est.int)^2 )) / (1:50000)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2)
plot(est.int, xlab = "Mean and Error range", ylab = "", type = "l", lwd = 2, ylim = mean(h_x.result_vec.d)+100*est.err[50000]*c(-1,1))
lines(est.int + 2*est.err, col = "gold", lwd = 2)
lines(est.int - 2*est.err, col = "gold", lwd = 2)
summary_table <- matrix(data =
c(mean(h_x.result_vec.a),var(h_x.result_vec.a),
mean(h_x.result_vec.b),var(h_x.result_vec.b),
mean(h_x.result_vec.c),var(h_x.result_vec.c),
mean(h_x.result_vec.d),var(h_x.result_vec.d)),
nrow = 2,
ncol = 4,
dimnames = list(c("Expected value estimator","Varinac value estimator"),c("A","B","C","D")))
summary_table
